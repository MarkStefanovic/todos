buildscript {
    ext.kotlinVersion = "1.3.10"
    ext.junitVersion = "5.0.0"
    ext.junitPlatformVersion = "1.0.0"

    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
    }
}

apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "org.junit.platform.gradle.plugin"

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
        maven { url "https://dl.bintray.com/kotlin/exposed" }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // ui
    compile "no.tornado:tornadofx:1.7.17"
    compile "de.jensd:fontawesomefx:8.9"
    compile "no.tornado:tornadofx-controlsfx:0.1"

    // rx
    compile group: "com.github.thomasnield", name: "rxkotlinfx", version: "2.2.2"
    compile group: "io.reactivex.rxjava2", name: "rxjava", version: "2.1.13"
    compile group: "io.reactivex.rxjava2", name: "rxkotlin", version: "2.2.0"

    //testing
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    runtime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    runtime "org.junit.platform:junit-platform-console:$junitPlatformVersion"
    testCompile "org.testfx:testfx-core:4.0.14-alpha"
    testCompile "org.testfx:testfx-junit:4.0.14-alpha"
    testCompile "org.testfx:testfx-junit5:4.0.14-alpha"


    // db
    compile "org.jetbrains.exposed:exposed:0.10.4"
    compile "org.xerial:sqlite-jdbc:3.8.11.2"
//    testCompile "com.h2database:h2:1.4.197"


    // logging
    compile "org.apache.logging.log4j:log4j-api:2.7"
    compile "org.apache.logging.log4j:log4j-core:2.7"
    compile "ch.qos.logback:logback-classic:1.1.7"  // With Logback we donâ€™t need to add SLF4J to our classpath
    compile "io.github.microutils:kotlin-logging:1.5.9"
}

mainClassName = "src.app.MyApp"

jar {
    manifest {
        attributes(
            "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
            "Main-Class": "src.app.MyApp"
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}